---
layout: post
category: "linux"
title:  "git的安装及使用"
tags: [linux, git]
---

- TOC
{:toc}


## 历史

什么是Git：

```
Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.
```

谁写了这个免费的开源软件：

```
Linus在1991年创建了开源的Linux；
Linus在2005年花了两周时间自己用C写了一个分布式版本控制系统；
2008年，GitHub网站上线。
```

-------------------------

## 安装

在mac上用[homebrew](https://brew.sh/)命令直接安装

配置(自己的电脑上的库都使用，或者不太的库使用不同的配置)：

~~~
$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"
~~~

-------------------------


## 命令

### 创建仓库，添加文件，提交

~~~
$ mkdir learngit
$ cd learngit
$ git init
Initialized empty Git repository in /Users/michael/learngit/.git/

$ git add readme.txt

$ git commit -m "wrote a readme file"
[master (root-commit) cb926e7] wrote a readme file
 1 file changed, 2 insertions(+)
 create mode 100644 readme.txt
 
# 一次添加多个文件后，再提交 
$ git add file1.txt
$ git add file2.txt file3.txt
$ git commit -m "add 3 files."
~~~

### 仓库状态查询

~~~
# 修改上面的readme文件后

$ git status
# On branch master
# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#
#    modified:   readme.txt
#
no changes added to commit (use "git add" and/or "git commit -a")

# 表明：readme.txt被修改过了，但还没有准备提交的修改

# 修改的具体内容

$ git diff readme.txt 
diff --git a/readme.txt b/readme.txt
index 46d49bf..9247db6 100644
--- a/readme.txt
+++ b/readme.txt
@@ -1,2 +1,2 @@
-Git is a version control system.
+Git is a distributed version control system.
 Git is free software.
 
# diff的输出和linux的diff命令一样

# 准备提交
$ git add readme.txt

$ git status
# On branch master
# Changes to be committed:
#   (use "git reset HEAD <file>..." to unstage)
#
#       modified:   readme.txt
#

$ git commit -m "add distributed"
[master ea34578] add distributed
 1 file changed, 1 insertion(+), 1 deletion(-)
 
# 查看提交后的状态
$ git status
# On branch master
nothing to commit (working directory clean)
~~~

### 查看commit日志

~~~
# 按照时间顺序，列举出最近的10个commit
gongjing@hekekedeiMac ~/Dropbox/Tsinghua-gongjing.github.io (git)-[master] % git log
commit 78fcc24813d8ef5b7cde2cb81470ac9e12e58393
Author: Tsinghua-gongjing <gongj15@mails.tsinghua.edu.cn>
Date:   Thu Feb 8 16:44:27 2018 +0800

    add blog git

commit 9aec7c9da7607d805fd25a1bd544669a1e3d210f
Author: Tsinghua-gongjing <gongj15@mails.tsinghua.edu.cn>
Date:   Thu Feb 8 15:45:12 2018 +0800

    add visulization collections

commit e0a711baaee4a8eee76320cbf0e97949e8cb682d
Author: Tsinghua-gongjing <gongj15@mails.tsinghua.edu.cn>
Date:   Thu Feb 8 13:14:06 2018 +0800

    add python blogs
    
# 只显示commit的message信息，其他的不输出
gongjing@hekekedeiMac ~/Dropbox/Tsinghua-gongjing.github.io (git)-[master] % git log --pretty=oneline
78fcc24813d8ef5b7cde2cb81470ac9e12e58393 add blog git
9aec7c9da7607d805fd25a1bd544669a1e3d210f add visulization collections
e0a711baaee4a8eee76320cbf0e97949e8cb682d add python blogs
49269b5c7eecb61e576e60106d77bce1db89045f test table format
19dc28d723e6fdf4a9a67c6c86003bc8939bdea8 set comment
21a38c17722712d50448c6de4901d1ffa895aa54 set comment
e9d562309f5abdad39ce42ea04344df2f16c3ccf set comment
4899527ab459cde41220e88b34cad40de179251b test
b12f39df607be5800f99caaef43c37036390b650 test
6ad51d0f988d68e78797fef0a484ff23f5e52e7e test disqus.html
~~~

### 恢复以往版本

~~~
# 上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。
$ git reset --hard HEAD^
HEAD is now at ea34578 add distributed

# 现在再查看log，最新的日志不见了，只有上个版本及之前的
$ git log
commit ea34578d5496d7dd233c827ed32a8cd576c5ee85
Author: Michael Liao <askxuefeng@gmail.com>
Date:   Tue Aug 20 14:53:12 2013 +0800

    add distributed

commit cb926e7ea50ad11b8f9e909c05226233bf755030
Author: Michael Liao <askxuefeng@gmail.com>
Date:   Mon Aug 19 17:51:55 2013 +0800

    wrote a readme file
    
# 直接指定commit的版本号，这里写了前几位（3628164），然后可以恢复到对应的版本。
# 版本恢复，速度快，指针操作
$ git reset --hard 3628164
HEAD is now at 3628164 append GPL

# reflog 记录自己的每一次操作及对应的版本号，可以直接恢复到之前的任何版本
$ git reflog
ea34578 HEAD@{0}: reset: moving to HEAD^
3628164 HEAD@{1}: commit: append GPL
ea34578 HEAD@{2}: commit: add distributed
cb926e7 HEAD@{3}: commit (initial): wrote a readme file
~~~

### 工作原理

我们修改的文件，或者新增加的文件，通过git add命令是先提交到本地的缓存区(Stage)，然后通过commit命令才是提交到具体的分支（比如默认构建的分支master）上，更新到最新的文件状态。

[![git_work_flow.jpeg](https://i.loli.net/2018/02/08/5a7c1939454cf.jpeg)](https://i.loli.net/2018/02/08/5a7c1939454cf.jpeg)


另外，git管理的是修改，而不是文件本身。[这一页的教程](https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001374829472990293f16b45df14f35b94b3e8a026220c5000)很好的说明了这个例子。主要是做了这么个实验：修改文件 -》git add -》修改文件 -》 git commit。 最后只执行添加了第一次的修改，因为第二次的还没有添加到缓存区。(Git是跟踪修改的，每次修改，如果不add到暂存区，那就不会加入到commit中。)

-------------------------


### 撤销修改

~~~
# 改乱了工作区某个文件的内容，想直接丢弃工作区的修改，该没有git add
git checkout -- file

# 改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改
git reset HEAD file
git checkout -- file
~~~

### 删除文件

~~~
# 用linux的命令删除，同步
$ remove test.txt
$ git add .
$ git commit -m "delete test"

# 用git rm删除，直接同步
$ git rm test.txt
rm 'test.txt'
$ git commit -m "remove test.txt"
[master d17efd8] remove test.txt
 1 file changed, 1 deletion(-)
 delete mode 100644 test.txt
 
# 恢复刚才删除的文件（checkout是撤销修改，删除操作也是一种修改）
$ git checkout -- test.txt
~~~

### 关联一个远程库

先有本地库，后有远程库的时候，如何关联远程库

~~~
# 关联
git remote add origin git@github.com:user_name/repo-name.git

# 推送。第一次用u参数，同步且建立关联
git push -u origin master

# 以后的推送
git push origin master
~~~

### 克隆远程库
Git支持多种协议，包括https，但通过ssh支持的**原生git协议速度最快**。

~~~
# clone remote repo
$ git clone git@github.com:michaelliao/gitskills.git
Cloning into 'gitskills'...
~~~

### 创建与合并分支

[这里](https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001375840038939c291467cc7c747b1810aab2fb8863508000)有一系列的图，来形象的说明分支相关的概念和操作

~~~
# -b 创建并切换到一个新的分支
$ git checkout -b dev
Switched to a new branch 'dev'

# 查看所有的分支， * 表示当前正在使用的分支
$ git branch
* dev
  master
  
# 在branch分支完成add操作
$ git add readme.txt 
$ git commit -m "branch test"
[dev fec145a] branch test
 1 file changed, 1 insertion(+)

# 切换分支
$ git checkout master
Switched to branch 'master'

# 合并指定分支到当前所在分支
$ git merge dev
Updating d17efd8..fec145a
Fast-forward
 readme.txt |    1 +
 1 file changed, 1 insertion(+)
 
# 删除分支
$ git branch -d dev
Deleted branch dev (was fec145a).
~~~

### 多人协作

查看远程

~~~
$ git remote
origin

# 查看远程库的详细信息
gongjing@hekekedeiMac ~/Dropbox/test (git)-[master] % git remote -v
origin	https://github.com/Tsinghua-gongjing/test.git (fetch)
origin	https://github.com/Tsinghua-gongjing/test.git (push)
~~~

推送分支

~~~
# origin（远程分支名称）， master（本地分支名称）
$ git push origin master  
~~~

抓取、合并分支

~~~
# 当本地和远程的不一致的时候，比如在远程网页界面修改过代码（远程分支比你的本地更新），此时本地的修改不能直接推送
$ git push origin dev
To git@github.com:michaelliao/learngit.git
 ! [rejected]        dev -> dev (non-fast-forward)
error: failed to push some refs to 'git@github.com:michaelliao/learngit.git'
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Merge the remote changes (e.g. 'git pull')
hint: before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.

# 需要先抓取下来，再进行本地修改的推送
$ git pull
$ git add
$ git push
~~~

## 标签

~~~
# 本来commit id是一窜无意义的字符窜，所以可以打上标签；默认标签是打在最新提交的commit上的
$ git tag v1.0

# 对之前的某个commit进行打标签，6224937就是commit id 
$ git tag v0.9 6224937

$ git show v0.9

# 删除标签
$ git tag -d v0.1
Deleted tag 'v0.1' (was e078af9)

# 推送某个标签到远程
$ git push origin v1.0
Total 0 (delta 0), reused 0 (delta 0)
To git@github.com:michaelliao/learngit.git
 * [new tag]         v1.0 -> v1.0

# 把所有的标签都推送
$ git push origin --tags
~~~

## 参加开源项目：pull-request

先把想参与的项目Fork到自己的仓库，然后从自己的仓库clone下来，修改提交；再向源发一个pull request(不一定会被接收)。

## 搭建git服务器

[这里](https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137583770360579bc4b458f044ce7afed3df579123eca000)是教如何自己搭建一个git服务器的，其实git相当于也是一个软件，可以在各个地方安装。

-------------------------

## 参考

* [廖雪峰的git教程](https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)

