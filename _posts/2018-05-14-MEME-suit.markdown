---
layout: post
category: "genomics"
title:  "Motif analysis: MEME suit"
tags: [genomics, motif]
---

- TOC
{:toc}

### FIMO error: base frequency

根据指定的motif文件，对query的fasta文件，用fimo扫潜在的RBP binding site：

```
fimo -oc combine_all_full \
     --thresh 0.001 \
     /Share/home/zhangqf7/gongjing/zebrafish/script/zhangting/paris_RBP/motif_CISBP_RNA_narrow/Collapsed.meme \
     combine_all.full.fa
```

motif .meme 文件的头文件（修改之前）：

```
MEME version 4.10.1

ALPHABET= ACGU

Background letter frequencies (from uniform background):
A 0.25000 C 0.25000 G 0.25000 U 0.25000
```

报错：

```
Errors from MEME text parser:
The frequency letter U at position 4 is invalid for the DNA alphabet.
Errors from MEME XML parser:
Expected state IN_MEME not found!
MEME XML parser returned error code 4.
FATAL: No motifs could be read.
```


motif .meme 文件的头文件（修改之后）：

```
MEME version 4.10.1

ALPHABET= ACGT

Background letter frequencies (from uniform background):
A 0.25000 C 0.25000 G 0.25000 T 0.25000
```

### Plot motif logo

```bash
[zhangqf7@loginview02 ]$ meme2images
Usage:    meme2images [options] <motifs file> <output directory>Options:    -motif <ID>      output only a selected motif; repeatable    -eps             output logos in eps format    -png             output logos in png format    -rc              output reverse complement logos    -help            print this usage messageDescription:    Creates motif logos from any MEME or DREME motif format.
```

```bash
[zhangqf7@loginview02 MolCel2018_RBP]$ cat test.meme
MEME version 4.10.1

ALPHABET
P
Q
S
Z
END ALPHABET

strands: +

MOTIF DGCR8_1_str
letter-probability matrix: alength= 4 w= 8 nsites= 269 E= 3.3e-302
 0.096655  0.111524  0.639405  0.152416
 0.048326  0.022304  0.866174  0.063196
 0.037174  0.044609  0.836433  0.081784
 0.052045  0.066914  0.788104  0.092937
 0.085501  0.078066  0.765801  0.070632
 0.059479  0.130111  0.698886  0.111524
 0.122676  0.122677  0.657993  0.096654
 0.208179  0.193309  0.397770  0.200743
 
# generate wrong character 
[zhangqf7@loginview02 MolCel2018_RBP]$ which meme2images
/Share/home/zhangqf/usr/meme_4.10.1/bin/meme2images
[zhangqf7@loginview02 MolCel2018_RBP]$ meme2images test.meme -eps test

# generate correct plot
[zhangqf7@loginview02 MolCel2018_RBP]$ /Share/home/zhangqf/usr/meme_4.11.2-app/bin/meme2images test.meme -eps test
``` 


[![meme2img_test.jpeg](https://i.loli.net/2018/06/19/5b28997eb4853.jpeg)](https://i.loli.net/2018/06/19/5b28997eb4853.jpeg)


### TOMOM: identify motif against known motif source

```bash
[zhangqf7@loginview02 bin]$ /Share/home/zhangqf7/bin/tomtom --version
5.0.2

# 最新的版本比之前的版本添加了 -norc 参数
# 指定这个参数，只输出正链的，
# 对于扫RNA motif链的方向性很重要（一般不要负链上的） 

[zhangqf7@loginview02 bin]$ /Share/home/zhangqf7/bin/tomtom
No query motif database supplied

Usage:
  tomtom [options] <query file> <target file>+
Options:
  -o <output dir>  Name of directory for output files;
                    will not replace existing directory
  -oc <output dir> Name of directory for output files;
                    will replace existing directory
  -xalph           Convert the alphabet of the target motif databases
                    to the alphabet of the query motif database
                    assuming the core symbols of the target motif
                    alphabet are a subset; default: reject differences
  -bfile <background file>
                   Name of background file;
                    default: use the background from the query
                    motif database
  -motif-pseudo <pseudo count>
                   Apply the pseudocount to the query and target motifs;
                    default: apply a pseudocount of 0.1
  -m <id>          Use only query motifs with a specified id;
                    may be repeated
  -mi <index>      Use only query motifs with a specifed index;
                    may be repeated
  -thresh <float>  Significance threshold; default: 0.5
  -evalue          Use E-value threshold; default: q-value
  -dist allr|ed|kullback|pearson|sandelin|blic1|blic5|llr1|llr5
                   Distance metric for scoring alignments;
                    default: pearson
  -internal        Only allow internal alignments;
                    default: allow overhangs
  -min-overlap <int>
                   Minimum overlap between query and target;
                    default: 1
  -norc            Do not score the reverse complements of targets
  -incomplete-scores
                   Ignore unaligned columns in computing scores
                    default: use complete set of columns
  -text            Output in text format (default is HTML)
  -png             Create PNG logos; default: don't create PNG logos
  -eps             Create EPS logos; default: don't create EPS logos
  -no-ssc          Don't apply small-sample correction to logos;
                    default: use small-sample correction
  -verbosity [1|2|3|4]
                   Set the verbosity of the program; default: 2 (normal)
  -version         Print the version and exit
  
$ tomtom -no-ssc 
		  -oc ./tomom_5_Collapsed-used 
		  -verbosity 1 
		  -min-overlap 5 
		  -dist pearson 
		  -evalue 
		  -thresh 5 
		  ./dreme.meme 
		  /path/to/motif/source
```

### Prepare .meme file from .fa file

Prepare the .fa file:

```bash
[zhangqf7@loginview02 motif_CISBP_RNA_narrow]$ head miR_Family_Info.fa
>let-7
GAGGUAG
>miR-1/206
GGAAUGU
>miR-10
ACCCUGU
>miR-101
ACAGUAC
>miR-103/107
GCAGCAU
```
The output .meme file:

```bash
[zhangqf7@loginview02 motif_CISBP_RNA_narrow]$ head -30 miR_Family_Info.meme
MEME version 4

ALPHABET= ACGT

Background letter frequencies (from uniform background):
A 0.25000 C 0.25000 G 0.25000 T 0.25000

MOTIF miR-214 (miR-214)

letter-probability matrix: alength= 4 w= 7 nsites= 20 E= 0
 0      1       0       0
 1      0       0       0
 0      0       1       0
 0      1       0       0
 1      0       0       0
 0      0       1       0
 0      0       1       0

MOTIF miR-217 (miR-217)

letter-probability matrix: alength= 4 w= 7 nsites= 20 E= 0
 1      0       0       0
 0      1       0       0
 0      0       0       1
 0      0       1       0
 0      1       0       0
 1      0       0       0
 0      0       0       1

MOTIF miR-740 (miR-740)
```

The script:

```python
from pyfasta import Fasta

def read_fa(fa):
    fa_dict1 = Fasta(fa, key_fn=lambda key: key.split("\t")[0])
    fa_dict = {i.split()[0]: j[0:] for i, j in fa_dict1.items()}
    print fa_dict.keys()[0:3]
    return fa_dict

def write_pwm(seq=None, motif_name=None):
	if seq is None:
		seq = 'AGGUAAGU'
	if motif_name is None:
		motif_name = 'Novel'
	s = 'MOTIF %s (%s)'%(motif_name, motif_name)
	s += '\n\n'
	s += 'letter-probability matrix: alength= 4 w= %s nsites= 20 E= 0'%(len(seq))
	s += '\n'
	for n in seq:
		n_s = [1 if n.upper() == b else 0 for b in ['A', 'C', 'G', 'U']]
		s += ' '+'\t'.join(map(str, n_s))
		s += '\n'
	s += '\n'
	return s

def meme_header():
	header = 'MEME version 4\n\nALPHABET= ACGT\n\nBackground letter frequencies (from uniform background):\nA 0.25000 C 0.25000 G 0.25000 T 0.25000\n\n'
	return header

def write_fa_all(fa=None):
	savefn = fa.replace('.fa', '.meme')
	SAVEFN = open(savefn, 'w')
	fa_dict = read_fa(fa)
	s_all = ''
	header = meme_header()
	s_all += header
	for i in fa_dict:
		seq = fa_dict[i]
		s = write_pwm(seq, motif_name=i)
		s_all += s
	print >>SAVEFN, s_all
	SAVEFN.close()

def main():
	# header = meme_header()
	# s = write_pwm()
	# print header + s
	write_fa_all()

if __name__ == '__main__':
	main()
```